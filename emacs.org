emacs

* 快捷键
** book marks
*** 书签命令速查表
| 快捷键  | 函数               | 介绍                                 |
|---------+--------------------+--------------------------------------|
| C-x r m | bookmark-set       | 在光标当前位置设置书签               |
| C-x r b | bookmark-jump      | 跳转到书签                           |
| nil     | bookmark-rename    | 重命名书签                           |
| nil     | bookmark-delete    | 删除一个书签                         |
| C-x r l | bookmark-menu-list | 进入*bookmark list*编辑缓冲区        |
| nil     | bookmark-insert    | 插入与给定书签关联着的文件的完整内容 |
| nil     | bookmark-write     | 把全部书签保存到指定文件里           |
| nil     | bookmark-load      | 从指定文件里加载书签                 |

*** 书单清单编辑命令速查表
| 命令 | 动作                                                             |
|------+------------------------------------------------------------------|
| d    | 给书签加上待删除标记                                             |
| r    | 对书签重命名                                                     |
| s    | 保存书签里的全部书签                                             |
| f    | 显示光标位置上的标签                                             |
| m    | 给书签加上待显示标记                                             |
| v    | 显示加有带显示的书签。如果没有待显示的就显示光标所在处的那个标签 |
| t    | 切换书签关联文件的存放位置                                       |
| w    | 显示书签关联文件的存放位置                                       |
| x    | 删除加有待删除标记的书签                                         |
| q    | 退出书签清单                                                     |

** shell 命令

| 快捷键    | 函数                        | 动作                                                |
|-----------+-----------------------------+-----------------------------------------------------|
| C-c C-c   | comint-interrput-subjob     | 中断当前输入                                        |
| C-d       | comint-delchar-or-maybe-eof | 在编辑缓冲区末尾时送出EOF；若在其他位置删除一个字符 |
| C-c C-d   | comint-send-eof             | 送出EOF                                             |
| C-c C-u   | comint-kill-input           | 删除当前行                                          |
| M-p       | comint-previous-input       | 检索上一个命令                                      |
| M-n       | comint-next-input           | 检索下一个命令                                      |
| C-c C-o   | comint-kill-output          | 删除最后一条命令的输出                              |
| C-c C-r   | comint-show-output          | 把输出内容的第一行移动到窗口的顶部                  |
| C-c C-e   | comint-show-maximun-output  | 把输出内容的最后一行移动到窗口底部                  |
| C-c C-n/p | comint-previous/next-prompt | 移动到前/后一条命令                                 |
|           |                             |                                                     |

** dired                           #<<dir>>
| 快捷键 | 函数                    | 动作                                     |
|--------+-------------------------+------------------------------------------|
| % m    | dired-mark-files-regexp | 给匹配这个正则表达式的文件加上待操作标记 |
| % d    | dired-flag-files-regexp | 给匹配这个正则表达式的文件加上待删除标记 |
|        |                         |                                          |

* org mode
** 链接                                                                :org:
*** 内部链接
    + 定义 *锚点*    #<<my-anchor>>
       [[my-anchor][内部链接]]   --> "[ [my-anchor ] [ 内部链接 ] ]"
    + 添加 *脚注* 链接 
    定义脚注 [fn:footprint1] 

*** 创建链接
| 快捷键	 | 命令	            | 说明                                 |
| C-c l	  | 	                | 保存链接                             |
| C-c C-l  | org-insert-link	 | 创建或修改链接，可以引用已保存的链接 |
| C-c C-o  | org-open-at-point | 	打开链接                           |
| C-c %	  | 	                | 记录内部链接地址                     |
| C-c &	  | 	                | 跳转到已记录的内部链接               |

** 表格                                                                :org:
*** 调整和区域移动 
| 快捷键  | 命令 | 说明                           |
| C-c C-c |      | 调整表格，不移动光标           |
| TAB     |      | 移动到下一区域，必要时新建一行 |
| S-TAB   |      | 移动到上一区域                 |
| RET     |      | 移动到下一行，必要时新建一行   |

*** 创建和转化表格
 | 快捷键   | 命令 | 说明             |
 | C-c 竖线 |      | 创建或转换成表格 |

*** 编辑行和列
| 快捷键         | 命令 | 说明                             |
| M-LEFT/RIGHT   |      | 移动列                           |
| M-UP/DOWN      |      | 移动行                           |
| M-S-LEFT/RIGHT |      | 删除/插入列                      |
| M-S-UP/DOWN    |      | 删除/插入行                      |
| C-c -          |      | 添加水平分割线                   |
| C-c RET        |      | 添加水平分割线并跳到下一行       |
| C-c ^          |      | 根据当前列排序，可以选择排序方式 |
** 列表
**** 列表操作快捷键
| 快捷键         | 命令 | 说明                      |
| TAB            |      | 折叠列表项                |
| M-RET          |      | 插入项                    |
| M-S-RET        |      | 插入带复选框的项          |
| M-S-UP/DOWN    |      | 移动列表项                |
| M-LEFT/RIGHT   |      | 升/降级列表项，不包括子项 |
| M-S-LEFT/RIGTH |      | 升/降级列表项，包括子项   |
| C-c C-c        |      | 改变复选框状态            |
| C-c -          |      | 更换列表标记（循环切换）  |

**** 五条短线以上显示为分割线

** 标签
** 元数据
*** 文档元数据
#+BEGIN_EXAMPLE 
主要是为文档添加一些”元数据“，使得发布的时候能更好地识别文档的内容。
  #+TITLE:       the title to be shown (default is the buffer name)
  #+AUTHOR:      the author (default taken from user-full-name)
  #+DATE:        a date, an Org timestamp1, or a format string for format-time-string
  #+EMAIL:       his/her email address (default from user-mail-address)
  #+DESCRIPTION: the page description, e.g. for the XHTML meta tag
  #+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
  #+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
  #+TEXT:        Some descriptive text to be inserted at the beginning.
  #+TEXT:        Several lines may be given.
  #+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
  #+BIND:        lisp-var lisp-val, e.g.: org-export-latex-low-levels itemize
                 You need to confirm using these, or configure org-export-allow-BIND
  #+LINK_UP:     the ``up'' link of an exported page
  #+LINK_HOME:   the ``home'' link of an exported page
  #+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}
  #+EXPORT_SELECT_TAGS:   Tags that select a tree for export
  #+EXPORT_EXCLUDE_TAGS:  Tags that exclude a tree from export
  #+XSLT:        the XSLT stylesheet used by DocBook exporter to generate FO file
#+END_EXAMPLE

*** 内容元数据
    通常在行首以“#+”开头，可以有多种用途。
**** *分行区块*
默认内容不换行，需要留出空行才能换行。定义了分行的区块可以实现普通换行：
#+BEGIN_VERSE
 Great clouds overhead
 Tiny black birds rise and fall
 Snow covers Emacs
     -- AlexSchroeder
#+END_VERSE
**** *缩进区块*
通常用于引用，与默认格式相比左右都会留出缩进：
#+BEGIN_QUOTE
  缩进区块
#+END_QUOTE
**** *居中区块*
#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER
**** *代码区块*
#+BEGIN_SRC ruby
  require 'redcarpet'
  md = Redcarpet.new("Hello, world.")
  puts md.to_html
#+END_SRC
**** *例子*
: 单行的例子以冒号开头

#+BEGIN_EXAMPLE
多行的例子
使用区块
#+END_EXAMPLE
**** *注释*
以‘#‘开头的行被看作注释，不会被导出
区块注释采用如下写法：

#+BEGIN_COMMENT
  块注释
  ...
 #+END_COMMENT
**** *表格与图片*
对于表格和图片，可以在前面增加标题和标签的说明，以方便交叉引用。
比如在表格的前面添加：
#+BEGIN_EXAMPLE
#+CAPTION:This is the caption for the next table (or link)
#+LABEL: tbl:table1:
#+END_EXAMPLE
则在需要的地方可以通过
\ref{table1}
来引用该表格。
**** *嵌入html*
对于导出html以及发布，嵌入html代码就很有用。比如下面的例子适用于格式化为cnblogs的代码块：

#+BEGIN_HTML
  <div class="cnblogs_Highlighter">
  <pre class="brush:cpp">
  int main()
  {
    return 0;
  }
  </pre>
  </div>
#+END_HTML
相当于在cnblogs的网页编辑器中插入"c++"代码。

**** *嵌入包含文件*
当导出文档时，你可以包含其他文件中的内容。比如，想包含你的“.emacs”文件，你可以用：

     #+INCLUDE: "~/.emacs.d.bak/.emacs" src emacs-lisp
可选的第二个第三个参数是组织方式（例如，“quote”，“example”，或者“src”），如果是 “src”，语言用来格式化内容。组织方式是可选的，如果不给出，文本会被当作 Org 模式的正常处理。用 C-c ,可以访问包含的文件。

**** *嵌入latex*
对于需要包含数学符号和特殊方程的科学笔记，Org 模式支持嵌入 LaTeX 代码到文件中。你可以直接使用类 TeX 的宏来输入特殊符号，输入方程，或者整个 LaTeX 环境。

Angles are written as Greek letters \alpha, \beta and \gamma. The mass if
the sun is M_sun = 1.989 x 10^30 kg. The radius of the sun is R_{sun} =
6.96 x 10^8 m. If $a^2=b$ and $b=2$, then the solution must be either
$a=+\sqrt{2}$ or $a=-\sqrt{2}$.
\begin{equation}
x=\sqrt{b}
\end{equation}
特殊设置之后，导出 HTML 时 LaTeX 代码片断会生成图片并包含进来。
* need to install [0/2]
+ [ ] find-file-project
+ [ ] multi cuorsor
* config                                                             :config:
** gui下的配置
spacemace 和 prelude感觉都可以
** 临时的emacs为了更加顺手
#+BEGIN_SRC emacs-lisp
;;-------------------------------better default------------------------------------------

;;在行首执行C-k时将该行删除
(setq-default kill-whole-line t)

;;设定不产是备份文件
(setq make-backup-files nil)
(setq auto-save-mode nil)

;;显示行列号
;;(global-linum-mode t)
;;关闭蜂鸣声
(setq ring-bell-function 'ignore)

;;高亮显示当前行
;(global-hl-line-mode t)

;;缩进问题
(setq indent-tabs-mode nil) ;;不插入tab字符，因为TAB是邪恶的;实在需要TAB键则用C-q TAB
(setq default-tab-width 4) ;;每次缩进4个空格
(setq tab-width 4)

;;abbrev-table
(define-abbrev-table 'global-abbrev-table '(
											;;("zm" "c:/Users/zhanghao/Desktop")
											))
;;hipppie-expend
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
										 try-expand-dabbrev-all-buffers
										 try-expand-dabbrev-from-kill
										 try-complete-file-name-partially
										 try-complete-file-name
										 try-expand-all-abbrevs
										 try-expand-list
										 try-expand-line
										 try-complete-lisp-symbol-partially
										 try-complete-lisp-symbol
										 ))

;;激活 C-x C-j 来打开文件所在目录
(require 'dired-x)
;;yes-no --> y-n
(fset 'yes-or-no-p 'y-or-n-p)
;;选中替换模式
(delete-selection-mode t)
;;
(menu-bar-mode 0)
(blink-cursor-mode 0)
;;dired mode
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)

;;hook
(add-hook 'c-mode-common-hook 'hs-minor-mode)  ;在c-mode下将hs-minor-mode打开
(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
;;--------------------------------------------------ui设置------------------------------------------------------
(setq visible-bell t)
;;关闭烦人的错误提示音

;;去掉工具栏 和 滚动条
(tool-bar-mode 0)
(scroll-bar-mode 0)
;;关闭guns启动时的画面
(setq inhibit-startup-message t)

;;关闭guns启动时的画面
(setq gnus-inhibit-startup-message t)

;;设置主题
;;(load-theme 'monokai t)

;(setq-default cursor-type 'box)
(setq blink-cursor-mode nil)

;;----------------------------defun myself---------------------------
;;格式化整个文件函数09
(defun indent-buffer ()
  "Indent the whole buffer."
  (interactive)
  (save-excursion
	(indent-region (point-min) (point-max) nil)))
(defun open-my-init-file()
  (interactive)
  ;;(find-file "c:/Users/zhanghao/AppData/Roaming/dailyRecord/agenda.org")
  (find-file "~/.emacs"))
;;类似于vim 中的o的功能
(defun nextline()
  (interactive)
  (message "move to end of line")
  (move-end-of-line nil)
  (newline-and-indent)
  )
;;隐藏文件系统中的^M符号
;; (defun hidden-dos-eol ()
;;   "do not show ^M in this file"
;;   (interactive)
;;   (setq buffer-display-table (make-display-table))
;;   (aset buffer-display-table ?/^M [])
;;   )
;;删除unix文件系统中的^M符号
(defun remove-dos-elo ()
  "Replace DOS end od lines CR with Unix eolns CR"
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t) (replace-match ""))
  )
;;-----------------------------key bandings (kbd)----------------------
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "M-s i") 'counsel-imenu)
(global-set-key (kbd "M-SPC") 'set-mark-command)
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "<f2>") 'open-my-init-file)
(global-set-key (kbd "C-S-d") 'kill-whole-line)
(global-set-key (kbd "C-o") 'nextline)
(global-set-key (kbd "C-<") 'shrink-window-horizontally)
(global-set-key (kbd "C->") 'enlarge-window-horizontally)
(global-set-key (kbd "C-x C-r") 'counsel-recentf)  ;;打开最近打开文件
(global-set-key [f5] 'hs-toggle-hiding) ;;折叠开启开关
(global-set-key [f6] 'indent-buffer) ;;格式化整个buffer
(global-set-key (kbd "C-v") 'er/expand-region) ;;C-v选中单词

;;----------------------------bind my key like spacemace----------------
(define-prefix-command 'ctl-j-map)
(global-set-key (kbd "C-j") 'ctl-j-map)
(bind-keys :prefix-map buffer-prefix-map
              :prefix "C-j b"
              ("b" . ivy-switch-buffer)
              ("k" . kill-this-buffer)
			  )


(bind-keys :prefix-map file-prefix-map
              :prefix "C-j f"
              ("f" . counsel-find-file)
              ("k" . kill-this-buffer))


#+END_SRC

* tmp
* Footnotes

[fn:footprint1] 分隔符
